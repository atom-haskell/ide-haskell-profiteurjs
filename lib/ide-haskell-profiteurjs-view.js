"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
async function runProfiteur(uri) {
    let cmd = atom.config.get('ide-haskell-profiteurjs.profiteurPath');
    if (!cmd)
        throw new Error('No profiteur path set!');
    let BP;
    if (cmd === 'profiteur.js') {
        cmd = require.resolve('@atom-haskell/profiteur-js');
        BP = atom_1.BufferedNodeProcess;
    }
    else {
        BP = atom_1.BufferedProcess;
    }
    const args = [uri, '-'];
    const ccmd = cmd;
    return new Promise((resolve, reject) => {
        const buf = [];
        const err = [];
        return new BP({
            command: ccmd,
            args: args,
            stdout: (data) => {
                buf.push(data);
            },
            stderr: (data) => {
                err.push(data);
            },
            exit: (code) => {
                if (code === 0)
                    resolve(buf.join('\n'));
                else
                    reject(err.join('\n'));
            },
        });
    });
}
class IdeHaskellProfiteurjsView {
    constructor(uri) {
        this.uri = uri;
        this.element = document.createElement('div');
        this.element.classList.add('ide-haskell-profiteurjs');
        const report = document.createElement('webview');
        report.style.width = '100%';
        report.style.height = '100%';
        this.element.appendChild(report);
        runProfiteur(uri)
            .then((html) => (report.src = 'data:text/html;base64,' + btoa(html)))
            .catch((err) => atom.notifications.addError(err.toString()));
    }
    getURI() {
        return this.uri;
    }
    getTitle() {
        return `Profiteur: ${this.uri}`;
    }
    destroy() {
        this.element.remove();
    }
}
exports.IdeHaskellProfiteurjsView = IdeHaskellProfiteurjsView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlLWhhc2tlbGwtcHJvZml0ZXVyanMtdmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pZGUtaGFza2VsbC1wcm9maXRldXJqcy12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTJEO0FBRTNELEtBQUssdUJBQXVCLEdBQVc7SUFDckMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLENBQUMsQ0FBQTtJQUNsRSxJQUFJLENBQUMsR0FBRztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtJQUNuRCxJQUFJLEVBQTBCLENBQUE7SUFDOUIsSUFBSSxHQUFHLEtBQUssY0FBYyxFQUFFO1FBQzFCLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUE7UUFDbkQsRUFBRSxHQUFHLDBCQUFtQixDQUFBO0tBQ3pCO1NBQU07UUFDTCxFQUFFLEdBQUcsc0JBQWUsQ0FBQTtLQUNyQjtJQUNELE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZCLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQTtJQUNoQixPQUFPLElBQUksT0FBTyxDQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzdDLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtRQUN4QixNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUE7UUFDeEIsT0FBTyxJQUFJLEVBQUUsQ0FBQztZQUNaLE9BQU8sRUFBRSxJQUFJO1lBQ2IsSUFBSSxFQUFFLElBQUk7WUFDVixNQUFNLEVBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBRTtnQkFDdkIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNoQixDQUFDO1lBQ0QsTUFBTSxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUU7Z0JBQ3ZCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDaEIsQ0FBQztZQUNELElBQUksRUFBRSxDQUFDLElBQVksRUFBRSxFQUFFO2dCQUNyQixJQUFJLElBQUksS0FBSyxDQUFDO29CQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7O29CQUNsQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBQzdCLENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFFRDtJQUlFLFlBQVksR0FBVztRQUNyQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUVkLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQTtRQUdyRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBUSxDQUFBO1FBQ3ZELE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQTtRQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7UUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDaEMsWUFBWSxDQUFDLEdBQUcsQ0FBQzthQUNkLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLHdCQUF3QixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2FBQ3BFLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNoRSxDQUFDO0lBRU0sTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQTtJQUNqQixDQUFDO0lBRU0sUUFBUTtRQUNiLE9BQU8sY0FBYyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDakMsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ3ZCLENBQUM7Q0FDRjtBQS9CRCw4REErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWZmZXJlZFByb2Nlc3MsIEJ1ZmZlcmVkTm9kZVByb2Nlc3MgfSBmcm9tICdhdG9tJ1xuXG5hc3luYyBmdW5jdGlvbiBydW5Qcm9maXRldXIodXJpOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBsZXQgY21kID0gYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1wcm9maXRldXJqcy5wcm9maXRldXJQYXRoJylcbiAgaWYgKCFjbWQpIHRocm93IG5ldyBFcnJvcignTm8gcHJvZml0ZXVyIHBhdGggc2V0IScpXG4gIGxldCBCUDogdHlwZW9mIEJ1ZmZlcmVkUHJvY2Vzc1xuICBpZiAoY21kID09PSAncHJvZml0ZXVyLmpzJykge1xuICAgIGNtZCA9IHJlcXVpcmUucmVzb2x2ZSgnQGF0b20taGFza2VsbC9wcm9maXRldXItanMnKVxuICAgIEJQID0gQnVmZmVyZWROb2RlUHJvY2Vzc1xuICB9IGVsc2Uge1xuICAgIEJQID0gQnVmZmVyZWRQcm9jZXNzXG4gIH1cbiAgY29uc3QgYXJncyA9IFt1cmksICctJ11cbiAgY29uc3QgY2NtZCA9IGNtZFxuICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgYnVmOiBzdHJpbmdbXSA9IFtdXG4gICAgY29uc3QgZXJyOiBzdHJpbmdbXSA9IFtdXG4gICAgcmV0dXJuIG5ldyBCUCh7XG4gICAgICBjb21tYW5kOiBjY21kLFxuICAgICAgYXJnczogYXJncyxcbiAgICAgIHN0ZG91dDogKGRhdGE6IHN0cmluZykgPT4ge1xuICAgICAgICBidWYucHVzaChkYXRhKVxuICAgICAgfSxcbiAgICAgIHN0ZGVycjogKGRhdGE6IHN0cmluZykgPT4ge1xuICAgICAgICBlcnIucHVzaChkYXRhKVxuICAgICAgfSxcbiAgICAgIGV4aXQ6IChjb2RlOiBudW1iZXIpID0+IHtcbiAgICAgICAgaWYgKGNvZGUgPT09IDApIHJlc29sdmUoYnVmLmpvaW4oJ1xcbicpKVxuICAgICAgICBlbHNlIHJlamVjdChlcnIuam9pbignXFxuJykpXG4gICAgICB9LFxuICAgIH0pXG4gIH0pXG59XG5cbmV4cG9ydCBjbGFzcyBJZGVIYXNrZWxsUHJvZml0ZXVyanNWaWV3IHtcbiAgcHJpdmF0ZSBlbGVtZW50OiBIVE1MRGl2RWxlbWVudFxuICBwcml2YXRlIHVyaTogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IodXJpOiBzdHJpbmcpIHtcbiAgICB0aGlzLnVyaSA9IHVyaVxuICAgIC8vIENyZWF0ZSByb290IGVsZW1lbnRcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpZGUtaGFza2VsbC1wcm9maXRldXJqcycpXG5cbiAgICAvLyBDcmVhdGUgbWVzc2FnZSBlbGVtZW50XG4gICAgY29uc3QgcmVwb3J0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnd2VidmlldycpIGFzIGFueVxuICAgIHJlcG9ydC5zdHlsZS53aWR0aCA9ICcxMDAlJ1xuICAgIHJlcG9ydC5zdHlsZS5oZWlnaHQgPSAnMTAwJSdcbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQocmVwb3J0KVxuICAgIHJ1blByb2ZpdGV1cih1cmkpXG4gICAgICAudGhlbigoaHRtbCkgPT4gKHJlcG9ydC5zcmMgPSAnZGF0YTp0ZXh0L2h0bWw7YmFzZTY0LCcgKyBidG9hKGh0bWwpKSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoZXJyLnRvU3RyaW5nKCkpKVxuICB9XG5cbiAgcHVibGljIGdldFVSSSgpIHtcbiAgICByZXR1cm4gdGhpcy51cmlcbiAgfVxuXG4gIHB1YmxpYyBnZXRUaXRsZSgpIHtcbiAgICByZXR1cm4gYFByb2ZpdGV1cjogJHt0aGlzLnVyaX1gXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlKClcbiAgfVxufVxuIl19