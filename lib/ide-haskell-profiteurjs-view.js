"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
async function runProfiteur(uri) {
    let cmd = atom.config.get('ide-haskell-profiteurjs.profiteurPath');
    if (!cmd)
        throw new Error('No profiteur path set!');
    let BP;
    if (cmd === 'profiteur.js') {
        cmd = require.resolve('@atom-haskell/profiteur-js');
        BP = atom_1.BufferedNodeProcess;
    }
    else {
        BP = atom_1.BufferedProcess;
    }
    const args = [uri, '-'];
    const ccmd = cmd;
    return new Promise((resolve, reject) => {
        const buf = [];
        const err = [];
        return new BP({
            command: ccmd,
            args: args,
            stdout: (data) => {
                buf.push(data);
            },
            stderr: (data) => {
                err.push(data);
            },
            exit: (code) => {
                if (code === 0)
                    resolve(buf.join('\n'));
                else
                    reject(err.join('\n'));
            },
        });
    });
}
class IdeHaskellProfiteurjsView {
    constructor(uri) {
        this.uri = uri;
        this.element = document.createElement('div');
        this.element.classList.add('ide-haskell-profiteurjs');
        const report = document.createElement('webview');
        report.style.width = '100%';
        report.style.height = '100%';
        this.element.appendChild(report);
        runProfiteur(uri)
            .then(html => report.src = 'data:text/html;base64,' + btoa(html))
            .catch(err => atom.notifications.addError(err.toString()));
    }
    getURI() {
        return this.uri;
    }
    getTitle() {
        return `Profiteur: ${this.uri}`;
    }
    destroy() {
        this.element.remove();
    }
}
exports.IdeHaskellProfiteurjsView = IdeHaskellProfiteurjsView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlLWhhc2tlbGwtcHJvZml0ZXVyanMtdmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pZGUtaGFza2VsbC1wcm9maXRldXJqcy12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTJEO0FBRTNELEtBQUssdUJBQXVCLEdBQVc7SUFDckMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLENBQUMsQ0FBQTtJQUNsRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtJQUNuRCxJQUFJLEVBQTBCLENBQUE7SUFDOUIsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsR0FBRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtRQUNuRCxFQUFFLEdBQUcsMEJBQW1CLENBQUE7SUFDMUIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sRUFBRSxHQUFHLHNCQUFlLENBQUE7SUFDdEIsQ0FBQztJQUNELE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZCLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQTtJQUNoQixNQUFNLENBQUMsSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDN0MsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFBO1FBQ3hCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtRQUN4QixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWixPQUFPLEVBQUUsSUFBSTtZQUNiLElBQUksRUFBRSxJQUFJO1lBQ1YsTUFBTSxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUU7Z0JBQ3ZCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDaEIsQ0FBQztZQUNELE1BQU0sRUFBRSxDQUFDLElBQVksRUFBRSxFQUFFO2dCQUN2QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2hCLENBQUM7WUFDRCxJQUFJLEVBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBRTtnQkFDckIsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQztvQkFBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO2dCQUN2QyxJQUFJO29CQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7WUFDN0IsQ0FBQztTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVEO0lBSUUsWUFBWSxHQUFXO1FBQ3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBRWQsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO1FBR3JELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFRLENBQUE7UUFDdkQsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFBO1FBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNoQyxZQUFZLENBQUMsR0FBRyxDQUFDO2FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2hFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDNUQsQ0FBQztJQUVNLE1BQU07UUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQTtJQUNqQixDQUFDO0lBRU0sUUFBUTtRQUNiLE1BQU0sQ0FBQyxjQUFjLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUNqQyxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDdkIsQ0FBQztDQUVGO0FBaENELDhEQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmZlcmVkUHJvY2VzcywgQnVmZmVyZWROb2RlUHJvY2VzcyB9IGZyb20gJ2F0b20nXG5cbmFzeW5jIGZ1bmN0aW9uIHJ1blByb2ZpdGV1cih1cmk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGxldCBjbWQgPSBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLXByb2ZpdGV1cmpzLnByb2ZpdGV1clBhdGgnKVxuICBpZiAoIWNtZCkgdGhyb3cgbmV3IEVycm9yKCdObyBwcm9maXRldXIgcGF0aCBzZXQhJylcbiAgbGV0IEJQOiB0eXBlb2YgQnVmZmVyZWRQcm9jZXNzXG4gIGlmIChjbWQgPT09ICdwcm9maXRldXIuanMnKSB7XG4gICAgY21kID0gcmVxdWlyZS5yZXNvbHZlKCdAYXRvbS1oYXNrZWxsL3Byb2ZpdGV1ci1qcycpXG4gICAgQlAgPSBCdWZmZXJlZE5vZGVQcm9jZXNzXG4gIH0gZWxzZSB7XG4gICAgQlAgPSBCdWZmZXJlZFByb2Nlc3NcbiAgfVxuICBjb25zdCBhcmdzID0gW3VyaSwgJy0nXVxuICBjb25zdCBjY21kID0gY21kXG4gIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBidWY6IHN0cmluZ1tdID0gW11cbiAgICBjb25zdCBlcnI6IHN0cmluZ1tdID0gW11cbiAgICByZXR1cm4gbmV3IEJQKHtcbiAgICAgIGNvbW1hbmQ6IGNjbWQsXG4gICAgICBhcmdzOiBhcmdzLFxuICAgICAgc3Rkb3V0OiAoZGF0YTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGJ1Zi5wdXNoKGRhdGEpXG4gICAgICB9LFxuICAgICAgc3RkZXJyOiAoZGF0YTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGVyci5wdXNoKGRhdGEpXG4gICAgICB9LFxuICAgICAgZXhpdDogKGNvZGU6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAoY29kZSA9PT0gMCkgcmVzb2x2ZShidWYuam9pbignXFxuJykpXG4gICAgICAgIGVsc2UgcmVqZWN0KGVyci5qb2luKCdcXG4nKSlcbiAgICAgIH0sXG4gICAgfSlcbiAgfSlcbn1cblxuZXhwb3J0IGNsYXNzIElkZUhhc2tlbGxQcm9maXRldXJqc1ZpZXcge1xuICBwcml2YXRlIGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50XG4gIHByaXZhdGUgdXJpOiBzdHJpbmdcblxuICBjb25zdHJ1Y3Rvcih1cmk6IHN0cmluZykge1xuICAgIHRoaXMudXJpID0gdXJpXG4gICAgLy8gQ3JlYXRlIHJvb3QgZWxlbWVudFxuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lkZS1oYXNrZWxsLXByb2ZpdGV1cmpzJylcblxuICAgIC8vIENyZWF0ZSBtZXNzYWdlIGVsZW1lbnRcbiAgICBjb25zdCByZXBvcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd3ZWJ2aWV3JykgYXMgYW55XG4gICAgcmVwb3J0LnN0eWxlLndpZHRoID0gJzEwMCUnXG4gICAgcmVwb3J0LnN0eWxlLmhlaWdodCA9ICcxMDAlJ1xuICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChyZXBvcnQpXG4gICAgcnVuUHJvZml0ZXVyKHVyaSlcbiAgICAudGhlbihodG1sID0+IHJlcG9ydC5zcmMgPSAnZGF0YTp0ZXh0L2h0bWw7YmFzZTY0LCcgKyBidG9hKGh0bWwpKVxuICAgIC5jYXRjaChlcnIgPT4gYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKGVyci50b1N0cmluZygpKSlcbiAgfVxuXG4gIHB1YmxpYyBnZXRVUkkoKSB7XG4gICAgcmV0dXJuIHRoaXMudXJpXG4gIH1cblxuICBwdWJsaWMgZ2V0VGl0bGUoKSB7XG4gICAgcmV0dXJuIGBQcm9maXRldXI6ICR7dGhpcy51cml9YFxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZSgpXG4gIH1cblxufVxuIl19