"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const path_1 = require("path");
async function runProfiteur(uri) {
    let cmd = atom.config.get('ide-haskell-profiteurjs.profiteurPath');
    if (!cmd)
        throw new Error('No profiteur path set!');
    let BP;
    if (cmd === 'profiteur.js') {
        cmd = `${__dirname}${path_1.sep}..${path_1.sep}bin${path_1.sep}profiteur.js`;
        BP = atom_1.BufferedNodeProcess;
    }
    else {
        BP = atom_1.BufferedProcess;
    }
    const args = [uri, '-'];
    const ccmd = cmd;
    return new Promise((resolve, reject) => {
        const buf = [];
        const err = [];
        return new BP({
            command: ccmd,
            args: args,
            stdout: (data) => {
                buf.push(data);
            },
            stderr: (data) => {
                err.push(data);
            },
            exit: (code) => {
                if (code === 0)
                    resolve(buf.join('\n'));
                else
                    reject(err.join('\n'));
            },
        });
    });
}
class IdeHaskellProfiteurjsView {
    constructor(uri) {
        this.uri = uri;
        this.element = document.createElement('div');
        this.element.classList.add('ide-haskell-profiteurjs');
        const report = document.createElement('webview');
        report.style.width = '100%';
        report.style.height = '100%';
        this.element.appendChild(report);
        runProfiteur(uri)
            .then(html => report.src = 'data:text/html;base64,' + btoa(html))
            .catch(err => atom.notifications.addError(err.toString()));
    }
    getURI() {
        return this.uri;
    }
    getTitle() {
        return `Profiteur: ${this.uri}`;
    }
    destroy() {
        this.element.remove();
    }
}
exports.IdeHaskellProfiteurjsView = IdeHaskellProfiteurjsView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlLWhhc2tlbGwtcHJvZml0ZXVyanMtdmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pZGUtaGFza2VsbC1wcm9maXRldXJqcy12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTJEO0FBQzNELCtCQUEwQjtBQUUxQixLQUFLLHVCQUF1QixHQUFXO0lBQ3JDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHVDQUF1QyxDQUFDLENBQUE7SUFDbEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUE7SUFDbkQsSUFBSSxFQUEwQixDQUFBO0lBQzlCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxVQUFHLEtBQUssVUFBRyxNQUFNLFVBQUcsY0FBYyxDQUFBO1FBQ3ZELEVBQUUsR0FBRywwQkFBbUIsQ0FBQTtJQUMxQixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixFQUFFLEdBQUcsc0JBQWUsQ0FBQTtJQUN0QixDQUFDO0lBQ0QsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDdkIsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFBO0lBQ2hCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBUyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUM3QyxNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUE7UUFDeEIsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFBO1FBQ3hCLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNaLE9BQU8sRUFBRSxJQUFJO1lBQ2IsSUFBSSxFQUFFLElBQUk7WUFDVixNQUFNLEVBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBRTtnQkFDdkIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNoQixDQUFDO1lBQ0QsTUFBTSxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUU7Z0JBQ3ZCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDaEIsQ0FBQztZQUNELElBQUksRUFBRSxDQUFDLElBQVksRUFBRSxFQUFFO2dCQUNyQixFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDO29CQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7Z0JBQ3ZDLElBQUk7b0JBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtZQUM3QixDQUFDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBRUQ7SUFJRSxZQUFZLEdBQVc7UUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUE7UUFFZCxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUE7UUFHckQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQVEsQ0FBQTtRQUN2RCxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUE7UUFDM0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2hDLFlBQVksQ0FBQyxHQUFHLENBQUM7YUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDaEUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUM1RCxDQUFDO0lBRU0sTUFBTTtRQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFBO0lBQ2pCLENBQUM7SUFFTSxRQUFRO1FBQ2IsTUFBTSxDQUFDLGNBQWMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ2pDLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUN2QixDQUFDO0NBRUY7QUFoQ0QsOERBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZmVyZWRQcm9jZXNzLCBCdWZmZXJlZE5vZGVQcm9jZXNzIH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IHNlcCB9IGZyb20gJ3BhdGgnXG5cbmFzeW5jIGZ1bmN0aW9uIHJ1blByb2ZpdGV1cih1cmk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGxldCBjbWQgPSBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLXByb2ZpdGV1cmpzLnByb2ZpdGV1clBhdGgnKVxuICBpZiAoIWNtZCkgdGhyb3cgbmV3IEVycm9yKCdObyBwcm9maXRldXIgcGF0aCBzZXQhJylcbiAgbGV0IEJQOiB0eXBlb2YgQnVmZmVyZWRQcm9jZXNzXG4gIGlmIChjbWQgPT09ICdwcm9maXRldXIuanMnKSB7XG4gICAgY21kID0gYCR7X19kaXJuYW1lfSR7c2VwfS4uJHtzZXB9YmluJHtzZXB9cHJvZml0ZXVyLmpzYFxuICAgIEJQID0gQnVmZmVyZWROb2RlUHJvY2Vzc1xuICB9IGVsc2Uge1xuICAgIEJQID0gQnVmZmVyZWRQcm9jZXNzXG4gIH1cbiAgY29uc3QgYXJncyA9IFt1cmksICctJ11cbiAgY29uc3QgY2NtZCA9IGNtZFxuICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgYnVmOiBzdHJpbmdbXSA9IFtdXG4gICAgY29uc3QgZXJyOiBzdHJpbmdbXSA9IFtdXG4gICAgcmV0dXJuIG5ldyBCUCh7XG4gICAgICBjb21tYW5kOiBjY21kLFxuICAgICAgYXJnczogYXJncyxcbiAgICAgIHN0ZG91dDogKGRhdGE6IHN0cmluZykgPT4ge1xuICAgICAgICBidWYucHVzaChkYXRhKVxuICAgICAgfSxcbiAgICAgIHN0ZGVycjogKGRhdGE6IHN0cmluZykgPT4ge1xuICAgICAgICBlcnIucHVzaChkYXRhKVxuICAgICAgfSxcbiAgICAgIGV4aXQ6IChjb2RlOiBudW1iZXIpID0+IHtcbiAgICAgICAgaWYgKGNvZGUgPT09IDApIHJlc29sdmUoYnVmLmpvaW4oJ1xcbicpKVxuICAgICAgICBlbHNlIHJlamVjdChlcnIuam9pbignXFxuJykpXG4gICAgICB9LFxuICAgIH0pXG4gIH0pXG59XG5cbmV4cG9ydCBjbGFzcyBJZGVIYXNrZWxsUHJvZml0ZXVyanNWaWV3IHtcbiAgcHJpdmF0ZSBlbGVtZW50OiBIVE1MRGl2RWxlbWVudFxuICBwcml2YXRlIHVyaTogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IodXJpOiBzdHJpbmcpIHtcbiAgICB0aGlzLnVyaSA9IHVyaVxuICAgIC8vIENyZWF0ZSByb290IGVsZW1lbnRcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpZGUtaGFza2VsbC1wcm9maXRldXJqcycpXG5cbiAgICAvLyBDcmVhdGUgbWVzc2FnZSBlbGVtZW50XG4gICAgY29uc3QgcmVwb3J0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnd2VidmlldycpIGFzIGFueVxuICAgIHJlcG9ydC5zdHlsZS53aWR0aCA9ICcxMDAlJ1xuICAgIHJlcG9ydC5zdHlsZS5oZWlnaHQgPSAnMTAwJSdcbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQocmVwb3J0KVxuICAgIHJ1blByb2ZpdGV1cih1cmkpXG4gICAgLnRoZW4oaHRtbCA9PiByZXBvcnQuc3JjID0gJ2RhdGE6dGV4dC9odG1sO2Jhc2U2NCwnICsgYnRvYShodG1sKSlcbiAgICAuY2F0Y2goZXJyID0+IGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihlcnIudG9TdHJpbmcoKSkpXG4gIH1cblxuICBwdWJsaWMgZ2V0VVJJKCkge1xuICAgIHJldHVybiB0aGlzLnVyaVxuICB9XG5cbiAgcHVibGljIGdldFRpdGxlKCkge1xuICAgIHJldHVybiBgUHJvZml0ZXVyOiAke3RoaXMudXJpfWBcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmUoKVxuICB9XG5cbn1cbiJdfQ==