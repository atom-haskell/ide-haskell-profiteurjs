"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const path_1 = require("path");
async function runProfiteur(uri) {
    let cmd = atom.config.get('ide-haskell-profiteurjs.profiteurPath');
    if (!cmd)
        throw new Error('No profiteur path set!');
    let BP;
    if (cmd === 'profiteur.js') {
        cmd = `${__dirname}${path_1.sep}..${path_1.sep}bin${path_1.sep}profiteur.js`;
        BP = atom_1.BufferedNodeProcess;
    }
    else {
        BP = atom_1.BufferedProcess;
    }
    const args = [uri, '-'];
    const ccmd = cmd;
    return new Promise((resolve, reject) => {
        const buf = [];
        const err = [];
        return new BP({
            command: ccmd,
            args: args,
            stdout: (data) => {
                buf.push(data);
            },
            stderr: (data) => {
                err.push(data);
            },
            exit: (code) => {
                if (code === 0)
                    resolve(buf.join('\n'));
                else
                    reject(err.join('\n'));
            },
        });
    });
}
class IdeHaskellProfiteurjsView {
    constructor(uri) {
        this.uri = uri;
        this.element = document.createElement('div');
        this.element.classList.add('ide-haskell-profiteurjs');
        const report = document.createElement('webview');
        report.style.width = '100%';
        report.style.height = '100%';
        this.element.appendChild(report);
        runProfiteur(uri)
            .then(html => report.src = 'data:text/html;base64,' + btoa(html))
            .catch(err => atom.notifications.addError(err.toString()));
    }
    getURI() {
        return this.uri;
    }
    getTitle() {
        return `Profiteur: ${this.uri}`;
    }
    destroy() {
        this.element.remove();
    }
}
exports.IdeHaskellProfiteurjsView = IdeHaskellProfiteurjsView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlLWhhc2tlbGwtcHJvZml0ZXVyanMtdmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pZGUtaGFza2VsbC1wcm9maXRldXJqcy12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTJEO0FBQzNELCtCQUEwQjtBQUUxQixLQUFLLHVCQUF1QixHQUFXO0lBQ3JDLElBQUksR0FBRyxHQUF1QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFBO0lBQ3RGLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0lBQ25ELElBQUksRUFBMEIsQ0FBQTtJQUM5QixFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssY0FBYyxDQUFDLENBQUMsQ0FBQztRQUMzQixHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsVUFBRyxLQUFLLFVBQUcsTUFBTSxVQUFHLGNBQWMsQ0FBQTtRQUN2RCxFQUFFLEdBQUcsMEJBQW1CLENBQUE7SUFDMUIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sRUFBRSxHQUFHLHNCQUFlLENBQUE7SUFDdEIsQ0FBQztJQUNELE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZCLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQTtJQUNoQixNQUFNLENBQUMsSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDN0MsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFBO1FBQ3hCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQTtRQUN4QixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWixPQUFPLEVBQUUsSUFBSTtZQUNiLElBQUksRUFBRSxJQUFJO1lBQ1YsTUFBTSxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUU7Z0JBQ3ZCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDaEIsQ0FBQztZQUNELE1BQU0sRUFBRSxDQUFDLElBQVksRUFBRSxFQUFFO2dCQUN2QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2hCLENBQUM7WUFDRCxJQUFJLEVBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBRTtnQkFDckIsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQztvQkFBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO2dCQUN2QyxJQUFJO29CQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7WUFDN0IsQ0FBQztTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVEO0lBSUUsWUFBWSxHQUFXO1FBQ3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBRWQsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO1FBR3JELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFRLENBQUE7UUFDdkQsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFBO1FBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNoQyxZQUFZLENBQUMsR0FBRyxDQUFDO2FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2hFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDNUQsQ0FBQztJQUVNLE1BQU07UUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQTtJQUNqQixDQUFDO0lBRU0sUUFBUTtRQUNiLE1BQU0sQ0FBQyxjQUFjLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUNqQyxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDdkIsQ0FBQztDQUVGO0FBaENELDhEQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmZlcmVkUHJvY2VzcywgQnVmZmVyZWROb2RlUHJvY2VzcyB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBzZXAgfSBmcm9tICdwYXRoJ1xuXG5hc3luYyBmdW5jdGlvbiBydW5Qcm9maXRldXIodXJpOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBsZXQgY21kOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLXByb2ZpdGV1cmpzLnByb2ZpdGV1clBhdGgnKVxuICBpZiAoIWNtZCkgdGhyb3cgbmV3IEVycm9yKCdObyBwcm9maXRldXIgcGF0aCBzZXQhJylcbiAgbGV0IEJQOiB0eXBlb2YgQnVmZmVyZWRQcm9jZXNzXG4gIGlmIChjbWQgPT09ICdwcm9maXRldXIuanMnKSB7XG4gICAgY21kID0gYCR7X19kaXJuYW1lfSR7c2VwfS4uJHtzZXB9YmluJHtzZXB9cHJvZml0ZXVyLmpzYFxuICAgIEJQID0gQnVmZmVyZWROb2RlUHJvY2Vzc1xuICB9IGVsc2Uge1xuICAgIEJQID0gQnVmZmVyZWRQcm9jZXNzXG4gIH1cbiAgY29uc3QgYXJncyA9IFt1cmksICctJ11cbiAgY29uc3QgY2NtZCA9IGNtZFxuICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgYnVmOiBzdHJpbmdbXSA9IFtdXG4gICAgY29uc3QgZXJyOiBzdHJpbmdbXSA9IFtdXG4gICAgcmV0dXJuIG5ldyBCUCh7XG4gICAgICBjb21tYW5kOiBjY21kLFxuICAgICAgYXJnczogYXJncyxcbiAgICAgIHN0ZG91dDogKGRhdGE6IHN0cmluZykgPT4ge1xuICAgICAgICBidWYucHVzaChkYXRhKVxuICAgICAgfSxcbiAgICAgIHN0ZGVycjogKGRhdGE6IHN0cmluZykgPT4ge1xuICAgICAgICBlcnIucHVzaChkYXRhKVxuICAgICAgfSxcbiAgICAgIGV4aXQ6IChjb2RlOiBudW1iZXIpID0+IHtcbiAgICAgICAgaWYgKGNvZGUgPT09IDApIHJlc29sdmUoYnVmLmpvaW4oJ1xcbicpKVxuICAgICAgICBlbHNlIHJlamVjdChlcnIuam9pbignXFxuJykpXG4gICAgICB9LFxuICAgIH0pXG4gIH0pXG59XG5cbmV4cG9ydCBjbGFzcyBJZGVIYXNrZWxsUHJvZml0ZXVyanNWaWV3IHtcbiAgcHJpdmF0ZSBlbGVtZW50OiBIVE1MRGl2RWxlbWVudFxuICBwcml2YXRlIHVyaTogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IodXJpOiBzdHJpbmcpIHtcbiAgICB0aGlzLnVyaSA9IHVyaVxuICAgIC8vIENyZWF0ZSByb290IGVsZW1lbnRcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpZGUtaGFza2VsbC1wcm9maXRldXJqcycpXG5cbiAgICAvLyBDcmVhdGUgbWVzc2FnZSBlbGVtZW50XG4gICAgY29uc3QgcmVwb3J0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnd2VidmlldycpIGFzIGFueVxuICAgIHJlcG9ydC5zdHlsZS53aWR0aCA9ICcxMDAlJ1xuICAgIHJlcG9ydC5zdHlsZS5oZWlnaHQgPSAnMTAwJSdcbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQocmVwb3J0KVxuICAgIHJ1blByb2ZpdGV1cih1cmkpXG4gICAgLnRoZW4oaHRtbCA9PiByZXBvcnQuc3JjID0gJ2RhdGE6dGV4dC9odG1sO2Jhc2U2NCwnICsgYnRvYShodG1sKSlcbiAgICAuY2F0Y2goZXJyID0+IGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihlcnIudG9TdHJpbmcoKSkpXG4gIH1cblxuICBwdWJsaWMgZ2V0VVJJKCkge1xuICAgIHJldHVybiB0aGlzLnVyaVxuICB9XG5cbiAgcHVibGljIGdldFRpdGxlKCkge1xuICAgIHJldHVybiBgUHJvZml0ZXVyOiAke3RoaXMudXJpfWBcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmUoKVxuICB9XG5cbn1cbiJdfQ==